{"version":3,"file":"big-axios.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,EAAQG,QAAQ,UACR,mBAAXC,QAAyBA,OAAOC,IAC9CD,OAAO,YAAa,CAAC,SAAUJ,GACL,iBAAZC,QACdA,QAAQ,aAAeD,EAAQG,QAAQ,UAEvCJ,EAAe,SAAIC,EAAQD,EAAY,MACxC,CATD,CASGO,MAAOC,GACV,kCCVAL,EAAOD,QAAUM,ICCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaV,QAGrB,IAAIC,EAASM,EAAyBE,GAAY,CAGjDT,QAAS,CAAC,GAOX,OAHAY,EAAoBH,GAAUR,EAAQA,EAAOD,QAASQ,GAG/CP,EAAOD,OACf,CCrBAQ,EAAoBK,EAAKZ,IACxB,IAAIa,EAASb,GAAUA,EAAOc,WAC7B,IAAOd,EAAiB,QACxB,IAAM,EAEP,OADAO,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAAChB,EAASkB,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEpB,EAASmB,IAC5EE,OAAOC,eAAetB,EAASmB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK9B,IACH,oBAAX+B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAetB,EAAS+B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAetB,EAAS,aAAc,CAAEiC,OAAO,GAAO,2ECF9D,MAAMC,EAA0C,CAC7C,IAAK,CACFC,IAAK,SAER,IAAK,CACFA,IAAK,QAER,IAAK,CACFA,IAAK,qBAER,IAAK,CACFA,IAAK,WAER,IAAK,CACFA,IAAK,cAER,IAAK,CACFA,IAAK,eAER,IAAK,CACFA,IAAK,SAER,IAAK,CACFA,IAAK,gBAER,IAAK,CACFA,IAAK,UAER,IAAK,CACFA,IAAK,WAER,IAAK,CACFA,IAAK,YAER,IAAK,CACFA,IAAK,kBAER,IAAK,CACFA,IAAK,IAER,IAAK,CACFA,IAAK,gBAER,IAAK,CACFA,IAAK,gBAER,IAAK,CACFA,IAAK,mBAiCX,EA7BA,MAEGC,WAAAA,CAAYC,GACTC,KAAKC,oBAAsB,CACxB,QAAS,CACNJ,IAAK,eAELE,EAET,CAEAG,gBAAkB,SAAUC,EAA+BC,GACxD,MAAMC,EAAQL,KAAKC,oBAAoBE,EAAY,KAAOP,EAAUO,EAAY,IAChF,OAAIE,GACGA,EAAMC,UACPD,EAAMC,WAGFF,GAAYC,EAAMR,KAErBO,GAGM,MAGhB,GCnEGG,EAAW,GACjB,IAAIC,EAAa,IAAIC,gBACjBC,EAAmD,GAgTvD,YA9SA,MACWC,KAAsBC,IAAAA,SAKtBC,eAA2B,GAC3BC,UAAwB,KAEhC,aAAIC,GACD,OAAOf,KAAKW,IACf,CAEA,yBAAIK,GACD,OAAOhB,KAAKa,cACf,CAYAI,MAAAA,CAAOhB,EAAmDiB,EAA8BC,GACrFnB,KAAKc,UAAY,IAAIM,EAAWnB,GAEhC,MAAMoB,EAAY,CAAEC,UAAW,SAAUC,gBAAiB,CAAC,IAAK,EAAG,OAAQC,sBAAuB,UAAWL,GA2G7G,OAzGAnB,KAAKyB,IAAM,GACXzB,KAAK0B,KAAO,CAAC,EAEb1B,KAAKW,KAAOC,IAAAA,OAAaM,GAGzBlB,KAAKa,eAAec,KACjB3B,KAAKW,KAAKiB,aAAaC,QAAQC,KAC3BZ,IAEEA,EAAOa,OAASvB,EAAWuB,OAEpBb,KAETc,IACS,IACDA,EACHC,QAASjC,KAAKc,UAAUZ,iBAAiB,WAOrDF,KAAKa,eAAec,KACjB3B,KAAKW,KAAKiB,aAAaM,SAASJ,KAC5BI,IACE,GACGb,EAAUE,gBAAgBY,SAASD,EAASR,KAAKU,OACZ,6BAArCF,EAASG,QAAQ,iBACoB,eAArCH,EAASG,QAAQ,gBAEjB,OAAOC,QAAQC,QAAQL,GACnB,CACJ,MAAMM,EAAY,IACZN,EACHO,SAAUP,EAASL,QAAQa,YAC3BT,QAASjC,KAAKc,UAAUZ,gBACrBgC,EAASR,KAAKU,KACdF,EAASR,KAAKiB,QAAUT,EAASR,KAAKO,SAAWC,EAASR,KAAK7B,MAIrE,OAAOyC,QAAQM,OAAOJ,EACzB,KAEFR,IACE,IAAIW,EAAS,GACTX,EAAIE,SACuB,MAAxBF,EAAIE,SAASW,QACdtC,EAASoB,KAAKK,EAAIE,UAEM,IAApB3B,EAASuC,SACVH,EAAS3C,KAAKc,UAAUZ,gBACrB8B,EAAIE,SAASW,OACbb,EAAIE,SAASR,KAAKO,SAAWD,EAAIE,SAASR,KAAKiB,QAAU,WAGvDI,SAASC,KAAKb,SAASd,EAAUC,aACnCyB,SAASC,KAAO3B,EAAUC,aAIhCqB,EAAS3C,KAAKc,UAAUZ,gBACrB8B,EAAIE,SAASW,OACbb,EAAIE,SAASR,KAAKiB,QAAUX,EAAIE,SAASR,KAAKO,SAAW,IAI/DU,EAAS3C,KAAKc,UAAUZ,gBAAgB,IAAK,IAGhD,MAAMsC,EAAY,IACZR,EACHd,OAAQc,EAAId,OACZQ,KAAMM,EAAIE,SAASR,KACnBe,SAAUT,EAAId,OAASc,EAAId,OAAOO,IAAM,GACxCwB,WAA4B,aAAhBjB,EAAIC,QAChBA,QAASU,GAGZ,OAAOL,QAAQM,OAAOJ,EAAU,KAIzCxC,KAAKa,eAAec,KACjB3B,KAAKW,KAAKiB,aAAaM,SAASJ,KAC5BI,GAEKb,EAAUE,gBAAgBY,SAASD,EAASR,KAAKU,OACE,OAAnDF,EAASR,KAAKL,EAAUG,wBACxBzC,OAAOmE,OAAO7B,EAAW,uBAElBiB,QAAQC,QAAQ,IACjBL,EACHR,KAAM,IAAKQ,EAASR,KAAM,CAACL,EAAUG,uBAAwBH,EAAU8B,uBAGnEjB,IAGZF,GAAQA,KAIRhC,IACV,CAEA4B,aAAe,CACZC,QAAS,IACH7B,KAAKW,KAAKiB,aAAaC,QAC1BC,IAAKA,CACFsB,EAEAC,EACAC,EAAmC,CAAEC,aAAa,EAAOC,QAAS,QAE3DxD,KAAKW,KAAKiB,aAAaC,QAAQC,IAAIsB,EAAaC,EAAYC,IAGzEpB,SAAU,IACJlC,KAAKW,KAAKiB,aAAaM,SAC1BJ,IAAKA,CACFsB,EAEAC,EACAC,EAAmC,CAAEC,aAAa,EAAOC,QAAS,QAE3DxD,KAAKW,KAAKiB,aAAaM,SAASJ,IAAIsB,EAAaC,EAAYC,KAK7EG,IAAAA,CACGhC,EACAC,EAA4B,CAAC,GAC7B,KAAEgC,EAAO,MAAK,QAAEJ,EAAU,CAAC,GAAuD,CAAC,GAOnF,OALAtD,KAAKyB,IAAMA,EACXzB,KAAK0D,KAAOA,EAAKC,oBAAoBC,OACrC5D,KAAK0B,KAAqB,QAAd1B,KAAK0D,KAAiB,CAAEG,OAAQnC,GAASA,EACrD1B,KAAKsD,QAAUA,EAEPtD,KAAK0D,MACV,IAAK,MACF,OAAO,IAAIpB,SAAW,CAACC,EAASK,KAC7B,MAAM1B,EAASnC,OAAO+E,OAAO9D,KAAK0B,KAAM1B,KAAKsD,SAC7CtD,KAAKW,KACDzB,IAAOc,KAAKyB,IAAKP,GACjB6C,MAAM7B,IAEoB8B,KACdzB,EAAQL,EAASR,SAK7BuC,OAAOjC,IACLhC,KAAKkE,IAAIlC,GACFY,EAAOZ,KACf,IAGX,IAAK,OACF,OAAO,IAAIM,SAAW,CAACC,EAASK,KAC7B,IAAK5C,KAAKyB,IAAIU,SAAS,SAAU,CAC9B,MAAMgC,EAAWC,KAAKC,UAAUrE,KAAK0B,MACrC,GAAIhB,EAAgB4D,MAAMC,GAAOA,EAAG9C,MAAQzB,KAAKyB,KAAO8C,EAAG7C,OAASyC,IACjE,OAAOvB,EAAO,CAAEX,QAAS,eAE5BvB,EAAgBiB,KAAK,CAAEF,IAAKzB,KAAKyB,IAAKC,KAAMyC,GAC/C,CAEAnE,KAAKW,KACD6D,KAAQxE,KAAKyB,IAAKzB,KAAK0B,KAAM1B,KAAKsD,SAClCS,MAAM7B,IAEoB8B,KACdzB,EAAQL,EAASR,SAK7BuC,OAAOjC,IACLtB,EAAkBA,EAAgB+D,QAAQF,GAAOA,EAAG9C,MAAQO,EAAId,OAAOO,KAAO8C,EAAG7C,OAASM,EAAId,OAAOQ,OAErG1B,KAAKkE,IAAIlC,GAEFY,EAAOZ,KACf,IAGX,IAAK,MACF,OAAO,IAAIM,SAAW,CAACC,EAASK,KAC7B5C,KAAKW,KACD+D,IAAO1E,KAAKyB,IAAKzB,KAAK0B,KAAM1B,KAAKsD,SACjCS,MAAM7B,GACGK,EAAQL,EAASR,QAE1BuC,OAAOjC,IACLhC,KAAKkE,IAAIlC,GACFY,EAAOZ,KACf,IAGX,IAAK,SACF,OAAO,IAAIM,SAAW,CAACC,EAASK,KAC7B5C,KAAKW,KACDgE,OAAU3E,KAAKyB,IAAKzB,KAAKsD,SACzBS,MAAM7B,GACGK,EAAQL,EAASR,QAE1BuC,OAAOjC,IACLhC,KAAKkE,IAAIlC,GACFY,EAAOZ,KACf,IAIjB,CAEA9C,GAAAA,CAA6CuC,EAAaC,EAAO,CAAC,EAAG4B,EAA8B,CAAC,GACjG,OAAOtD,KAAKyD,KAAKhC,EAAKC,EAAM,CAAE4B,QAASA,GAC1C,CAEAkB,IAAAA,CAA8C/C,EAAaC,EAAO,CAAC,EAAG4B,EAA8B,CAAC,GAClG,OAAOtD,KAAKyD,KAAKhC,EAAKC,EAAM,CAAEgC,KAAM,OAAQJ,QAASA,GACxD,CAEAoB,GAAAA,CAA6CjD,EAAaC,EAAO,CAAC,EAAG4B,EAA8B,CAAC,GACjG,OAAOtD,KAAKyD,KAAKhC,EAAKC,EAAM,CAAEgC,KAAM,MAAOJ,QAASA,GACvD,CAEAqB,OAAgDlD,EAAa6B,EAA8B,CAAC,GACzF,OAAOtD,KAAKyD,KAAKhC,EAAK,CAAC,EAAG,CAAEiC,KAAM,SAAUJ,QAASA,GACxD,CAEAsB,KAAAA,GAEGpE,EAAWoE,QAGXpE,EAAa,IAAIC,eACpB,CAEAoE,aAAAA,GACGnE,EAAkB,EACrB,CAEQwD,GAAAA,CAAIlC,GACT,GAAoB,aAAhBA,EAAIC,QACL,OAAO6C,QAAQC,KAAK,qBAAsB/C,EAAIC,SAGjD6C,QAAQE,MAAM,gBAAiB,cAElBjG,OAAOkG,KAAKjD,GAChBc,OAAS,GACfgC,QAAQZ,IAAI,QAAS,4CAA6ClC,EAAIS,UACtEqC,QAAQZ,IAAI,QAAS,4CAA6ClC,EAAId,OAAOgE,QAC7EJ,QAAQZ,IAAI,QAAS,4CAA6ClC,EAAId,OAAO2C,QAC7EiB,QAAQZ,IAAI,QAAS,4CAA6ClC,EAAIN,MACtEoD,QAAQZ,IAAI,UAAW,4CAA6ClC,IAEpE8C,QAAQZ,IAAK,YAAY,4CAA6ClC,GAEzE8C,QAAQK,UACX,URlTH","sources":["webpack://BigAxios/webpack/universalModuleDefinition","webpack://BigAxios/external umd \"axios\"","webpack://BigAxios/webpack/bootstrap","webpack://BigAxios/webpack/runtime/compat get default export","webpack://BigAxios/webpack/runtime/define property getters","webpack://BigAxios/webpack/runtime/hasOwnProperty shorthand","webpack://BigAxios/webpack/runtime/make namespace object","webpack://BigAxios/./src/Exceptions.ts","webpack://BigAxios/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"axios\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"big-axios\", [\"axios\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"big-axios\"] = factory(require(\"axios\"));\n\telse\n\t\troot[\"BigAxios\"] = factory(root[\"axios\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__300__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__300__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type { ExceptionMsg } from '../types/index';\n\n// 系统错误\nconst errorMsgs: Record<string, ExceptionMsg> = {\n   400: {\n      msg: '错误的请求'\n   },\n   401: {\n      msg: '验证失败'\n   },\n   403: {\n      msg: '服务器拒绝访问，请检查操作是否合法'\n   },\n   404: {\n      msg: '请求地址不存在'\n   },\n   405: {\n      msg: '您没有权限进行此操作'\n   },\n   406: {\n      msg: '请您保证内容完整后提交'\n   },\n   409: {\n      msg: '内容已存在'\n   },\n   429: {\n      msg: '请求过于频繁，请稍后再试'\n   },\n   413: {\n      msg: '请求实体过大'\n   },\n   414: {\n      msg: '请求URI过长'\n   },\n   415: {\n      msg: '不支持的媒体类型'\n   },\n   500: {\n      msg: '服务器内部错误，请联系管理员'\n   },\n   501: {\n      msg: ''\n   },\n   502: {\n      msg: '网关错误，请检查您的网络'\n   },\n   503: {\n      msg: '服务器维护中,请稍后重试'\n   },\n   504: {\n      msg: '网关连接超时，请检查您的网络'\n   }\n};\n\nclass Exception {\n   private serviceApiErrorMsgs: Record<string, ExceptionMsg>;\n   constructor(msgs: Record<string, ExceptionMsg>) {\n      this.serviceApiErrorMsgs = {\n         '-9999': {\n            msg: '发起网络请求失败'\n         },\n         ...msgs\n      };\n   }\n\n   getExceptionMsg = function (errorCode: number | undefined, errorMsg?: string) {\n      const error = this.serviceApiErrorMsgs[errorCode + ''] ?? errorMsgs[errorCode + ''];\n      if (error) {\n         if (error.callback) {\n            error.callback();\n         }\n\n         return errorMsg || error.msg;\n      } else {\n         if (errorMsg) {\n            return errorMsg;\n         } else {\n            return '未知错误';\n         }\n      }\n   };\n}\n\nexport default Exception;\n","import axios from 'axios';\nimport Exceptions from './Exceptions';\n\nimport type {\n   AxiosRequestConfig,\n   AxiosInstance,\n   CreateAxiosDefaults,\n   AxiosInterceptorOptions,\n   InternalAxiosRequestConfig,\n   AxiosResponse\n} from 'axios';\nimport type { Method, ResponsePromise, Response, ExceptionMsg, BigAxios as BigAxiosInstance, ExtraOptions } from '../types/index';\n\nconst queue401 = [];\nlet controller = new AbortController();\nlet postRequestList: { url: string; data: string }[] = [];\n\nclass BigAxios {\n   private http: AxiosInstance = axios.create();\n   private url: string;\n   private type: string | undefined;\n   private data: Record<string, any>;\n   private options: AxiosRequestConfig;\n   private interceptorIds: number[] = [];\n   private exception: Exceptions = null;\n\n   get axiosHttp(): AxiosInstance {\n      return this.http;\n   }\n\n   get builtInInterceptorIds(): number[] {\n      return this.interceptorIds;\n   }\n\n   /**\n    * 创建 big-axios 实例\n    * @param serviceApiErrorMsgs 服务端返回的错误码与错误信息\n    * @param config 配置，可参考 axios 的配置项\n    * @param extraOptions loginPath：登录页面路径，默认值：/login，用于未登录时跳转到登录页面；\n    *                     successfulCodes：业务 api 返回的成功状态码，默认值：[200, 0, '200']；\n    *                     responseDataObjectKey：请求响应数据（response.data）中的值为请求结果的属性的名称，默认值：data；\n    *                     defaultResponseData：用于指定请求返回结果的默认值，结合 responseDataObjectKey 使用；\n    * @returns {BigAxiosInstance} big-axios 实例\n    */\n   create(serviceApiErrorMsgs: Record<string, ExceptionMsg>, config?: CreateAxiosDefaults, extraOptions?: ExtraOptions): BigAxiosInstance {\n      this.exception = new Exceptions(serviceApiErrorMsgs);\n\n      const myOptions = { loginPath: '/login', successfulCodes: [200, 0, '200'], responseDataObjectKey: 'data', ...extraOptions };\n\n      this.url = '';\n      this.data = {};\n\n      this.http = axios.create(config);\n\n      // 创建内置请求拦截器\n      this.interceptorIds.push(\n         this.http.interceptors.request.use(\n            (config) => {\n               // 设置请求可取消\n               config.signal = controller.signal;\n\n               return config;\n            },\n            (err) => {\n               return {\n                  ...err,\n                  message: this.exception.getExceptionMsg(-9999)\n               };\n            }\n         )\n      );\n\n      // 创建内置响应拦截器\n      this.interceptorIds.push(\n         this.http.interceptors.response.use(\n            (response) => {\n               if (\n                  myOptions.successfulCodes.includes(response.data.code) ||\n                  response.headers['content-type'] === 'application/octet-stream' ||\n                  response.headers['content-type'] === 'image/Jpeg'\n               ) {\n                  return Promise.resolve(response);\n               } else {\n                  const errorData = {\n                     ...response,\n                     errorUrl: response.request.responseURL,\n                     message: this.exception.getExceptionMsg(\n                        response.data.code,\n                        response.data.errMsg || response.data.message || response.data.msg\n                     )\n                  };\n\n                  return Promise.reject(errorData);\n               }\n            },\n            (err) => {\n               let errMsg = '';\n               if (err.response) {\n                  if (err.response.status === 401) {\n                     queue401.push(err.response);\n                     // 多个接口同时请求，只提示一次登录过期\n                     if (queue401.length === 1) {\n                        errMsg = this.exception.getExceptionMsg(\n                           err.response.status,\n                           err.response.data.message || err.response.data.errMsg || '登录信息已过期'\n                        );\n\n                        if (!location.href.includes(myOptions.loginPath)) {\n                           location.href = myOptions.loginPath;\n                        }\n                     }\n                  } else {\n                     errMsg = this.exception.getExceptionMsg(\n                        err.response.status,\n                        err.response.data.errMsg || err.response.data.message || ''\n                     );\n                  }\n               } else {\n                  errMsg = this.exception.getExceptionMsg(504, '');\n               }\n\n               const errorData = {\n                  ...err,\n                  config: err.config,\n                  data: err.response.data,\n                  errorUrl: err.config ? err.config.url : '',\n                  isCanceled: err.message === 'canceled', // 主动取消请求\n                  message: errMsg\n               };\n\n               return Promise.reject(errorData);\n            }\n         )\n      );\n      this.interceptorIds.push(\n         this.http.interceptors.response.use(\n            (response) => {\n               if (\n                  myOptions.successfulCodes.includes(response.data.code) &&\n                  response.data[myOptions.responseDataObjectKey] === null &&\n                  Object.hasOwn(myOptions, 'defaultResponseData')\n               ) {\n                  return Promise.resolve({\n                     ...response,\n                     data: { ...response.data, [myOptions.responseDataObjectKey]: myOptions.defaultResponseData }\n                  });\n               } else {\n                  return response;\n               }\n            },\n            (err) => err\n         )\n      );\n\n      return this;\n   }\n\n   interceptors = {\n      request: {\n         ...this.http.interceptors.request,\n         use: (\n            onFulfilled?: ((value: InternalAxiosRequestConfig) => InternalAxiosRequestConfig | Promise<InternalAxiosRequestConfig>) | null,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onRejected?: ((error: any) => any) | null,\n            options: AxiosInterceptorOptions = { synchronous: false, runWhen: null }\n         ): number => {\n            return this.http.interceptors.request.use(onFulfilled, onRejected, options);\n         }\n      },\n      response: {\n         ...this.http.interceptors.response,\n         use: (\n            onFulfilled?: ((value: AxiosResponse) => AxiosResponse | Promise<AxiosResponse>) | null,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onRejected?: ((error: any) => any) | null,\n            options: AxiosInterceptorOptions = { synchronous: false, runWhen: null }\n         ): number => {\n            return this.http.interceptors.response.use(onFulfilled, onRejected, options);\n         }\n      }\n   };\n\n   ajax<D = any, M = string, U = Response<D, M>>(\n      url: string,\n      data: Record<string, any> = {},\n      { type = 'GET', options = {} }: { type?: Method; options?: AxiosRequestConfig } = {}\n   ): ResponsePromise<D, M, U> {\n      this.url = url;\n      this.type = type.toLocaleUpperCase().trim();\n      this.data = this.type === 'GET' ? { params: data } : data;\n      this.options = options;\n\n      switch (this.type) {\n         case 'GET': {\n            return new Promise<U>((resolve, reject) => {\n               const config = Object.assign(this.data, this.options);\n               this.http\n                  .get<U>(this.url, config)\n                  .then((response) => {\n                     // 图片\n                     if (response instanceof Blob) {\n                        return resolve(response.data);\n                     }\n\n                     return resolve(response.data);\n                  })\n                  .catch((err) => {\n                     this.log(err);\n                     return reject(err);\n                  });\n            });\n         }\n         case 'POST': {\n            return new Promise<U>((resolve, reject) => {\n               if (!this.url.includes('login')) {\n                  const dataJson = JSON.stringify(this.data);\n                  if (postRequestList.find((pd) => pd.url === this.url && pd.data === dataJson)) {\n                     return reject({ message: '请不要提交重复的数据' });\n                  }\n                  postRequestList.push({ url: this.url, data: dataJson });\n               }\n\n               this.http\n                  .post<U>(this.url, this.data, this.options)\n                  .then((response) => {\n                     // blob类型\n                     if (response instanceof Blob) {\n                        return resolve(response.data);\n                     }\n\n                     return resolve(response.data);\n                  })\n                  .catch((err) => {\n                     postRequestList = postRequestList.filter((pd) => pd.url !== err.config.url || pd.data !== err.config.data);\n\n                     this.log(err);\n\n                     return reject(err);\n                  });\n            });\n         }\n         case 'PUT': {\n            return new Promise<U>((resolve, reject) => {\n               this.http\n                  .put<U>(this.url, this.data, this.options)\n                  .then((response) => {\n                     return resolve(response.data);\n                  })\n                  .catch((err) => {\n                     this.log(err);\n                     return reject(err);\n                  });\n            });\n         }\n         case 'DELETE': {\n            return new Promise<U>((resolve, reject) => {\n               this.http\n                  .delete<U>(this.url, this.options)\n                  .then((response) => {\n                     return resolve(response.data);\n                  })\n                  .catch((err) => {\n                     this.log(err);\n                     return reject(err);\n                  });\n            });\n         }\n      }\n   }\n\n   get<D = any, M = string, U = Response<D, M>>(url: string, data = {}, options: AxiosRequestConfig = {}): ResponsePromise<D, M, U> {\n      return this.ajax(url, data, { options: options });\n   }\n\n   post<D = any, M = string, U = Response<D, M>>(url: string, data = {}, options: AxiosRequestConfig = {}): ResponsePromise<D, M, U> {\n      return this.ajax(url, data, { type: 'POST', options: options });\n   }\n\n   put<D = any, M = string, U = Response<D, M>>(url: string, data = {}, options: AxiosRequestConfig = {}): ResponsePromise<D, M, U> {\n      return this.ajax(url, data, { type: 'PUT', options: options });\n   }\n\n   delete<D = any, M = string, U = Response<D, M>>(url: string, options: AxiosRequestConfig = {}): ResponsePromise<D, M, U> {\n      return this.ajax(url, {}, { type: 'DELETE', options: options });\n   }\n\n   abort(): void {\n      // 取消尚未完成的请求\n      controller.abort();\n\n      // 重置 controller 防止新请求无法发出\n      controller = new AbortController();\n   }\n\n   clearPostData(): void {\n      postRequestList = [];\n   }\n\n   private log(err: { message: string; errorUrl: string; config: AxiosRequestConfig; data: Record<string, string> }) {\n      if (err.message === 'canceled') {\n         return console.warn('尚未完成的 http 请求已取消: ', err.message);\n      }\n\n      console.group('%c http 请求错误：', 'color:red;');\n\n      const keys = Object.keys(err);\n      if (keys.length > 0) {\n         console.log('%c地址：', 'font-family:PingFang SC, Microsoft YaHei;', err.errorUrl);\n         console.log('%c方式：', 'font-family:PingFang SC, Microsoft YaHei;', err.config.method);\n         console.log('%c参数：', 'font-family:PingFang SC, Microsoft YaHei;', err.config.params);\n         console.log('%c结果：', 'font-family:PingFang SC, Microsoft YaHei;', err.data);\n         console.log('%c详细信息：', 'font-family:PingFang SC, Microsoft YaHei;', err);\n      } else {\n         console.log(`%c error:`, 'font-family:PingFang SC, Microsoft YaHei;', err);\n      }\n      console.groupEnd();\n   }\n}\n\nexport default new BigAxios();\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__300__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","errorMsgs","msg","constructor","msgs","this","serviceApiErrorMsgs","getExceptionMsg","errorCode","errorMsg","error","callback","queue401","controller","AbortController","postRequestList","http","axios","interceptorIds","exception","axiosHttp","builtInInterceptorIds","create","config","extraOptions","Exceptions","myOptions","loginPath","successfulCodes","responseDataObjectKey","url","data","push","interceptors","request","use","signal","err","message","response","includes","code","headers","Promise","resolve","errorData","errorUrl","responseURL","errMsg","reject","status","length","location","href","isCanceled","hasOwn","defaultResponseData","onFulfilled","onRejected","options","synchronous","runWhen","ajax","type","toLocaleUpperCase","trim","params","assign","then","Blob","catch","log","dataJson","JSON","stringify","find","pd","post","filter","put","delete","abort","clearPostData","console","warn","group","keys","method","groupEnd"],"sourceRoot":""}